<launch>
  <param name="/yolov8_detector/detection_classes/names" value="['person', 'bicycle', 'car', 'motorcycle', 'bus', 'truck']" />
  <!-- 发布深度图像转换为点云 -->
  <node pkg="nodelet" type="nodelet" name="nodelet_manager" args="manager" output="screen"/>
  
  <node pkg="nodelet" type="nodelet" name="point_cloud_xyzrgb" 
        args="load depth_image_proc/point_cloud_xyzrgb nodelet_manager">
    <remap from="rgb/camera_info" to="/camera/color/camera_info"/>
    <remap from="rgb/image_rect_color" to="/camera/color/image_raw"/>
    <remap from="depth_registered/image_rect" to="/camera/aligned_depth_to_color/image_raw"/>
    <remap from="depth_registered/points" to="/camera/depth/color/points"/>
  </node>
  
  <!-- 启动YOLOv8检测器 -->
  <node pkg="tb3_semantic_mapping" type="yolov8_detector.py" name="yolov8_detector" output="screen">
    <!-- 可能需要设置PYTHONPATH环境变量 -->
    <env name="PYTHONPATH" value="$(env PYTHONPATH)"/>
  </node>
  
  <!-- 点云处理节点 -->
  <node pkg="nodelet" type="nodelet" name="label_mask"
        args="load jsk_pcl_utils/LabelToClusterPointIndices nodelet_manager">
    <remap from="~input" to="/yolov8_detector/label_image"/>
    <remap from="~output" to="/yolov8_detector/cluster_points"/>
  </node>
  
  <node pkg="nodelet" type="nodelet" name="cluster_decomposer"
        args="load jsk_pcl/ClusterPointIndicesDecomposer nodelet_manager">
    <remap from="~input" to="/camera/depth/color/points"/>
    <remap from="~target" to="/yolov8_detector/cluster_points"/>
    <rosparam>
      approximate_sync: true
      
      # 目标坐标系
      align_boxes: true
      align_boxes_with_plane: false
      target_frame_id: map
      
      # 发布TF
      publish_tf: true
      tf_prefix: yolo_
    </rosparam>
  </node>
  
  <!-- 目标检测收集器 -->
  <node pkg="tb3_semantic_mapping" type="detection_collector.py" name="detection_collector" output="screen"/>
</launch>